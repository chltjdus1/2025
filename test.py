# ----------------------------
# 1. 필요한 라이브러리 불러오기
# ----------------------------
import streamlit as st   # Streamlit: 웹앱 제작용 라이브러리
import random            # random: 리스트에서 무작위 요소 선택용

# ----------------------------
# 2. 간단한 한국어 감정 분석 함수
# ----------------------------
def extended_sentiment_analysis(text):
    """
    사용자의 입력 문장에서 감정을 분석해 반환하는 함수
    - 긍정: 행복, 즐거움, 설렘, 만족, 신남
    - 부정: 슬픔, 우울, 피곤, 외로움, 긴장
    - 중립: 보통, 평온, 무난
    """
    text = text.lower()  # 입력 문장을 소문자로 변환

    positive_keywords = ["좋아", "행복", "즐거", "신나", "기쁨", "만족", "설렘", "좋은"]
    negative_keywords = ["슬퍼", "우울", "짜증", "화나", "싫어", "힘들", "피곤", "외로움", "긴장", "불안"]
    neutral_keywords  = ["보통", "무난", "평온", "그냥"]

    if any(word in text for word in positive_keywords):
        return "긍정"
    elif any(word in text for word in negative_keywords):
        return "부정"
    else:
        return "중립"

# ----------------------------
# 3. 감정별 음식 + 레시피 + 칼로리 데이터
# ----------------------------
mood_foods = {
    "긍정": [
        {"음식": "파스타", "레시피": "면 삶기 → 소스 만들기 → 섞기 → 치즈 뿌리기", "칼로리": 650},
        {"음식": "초밥", "레시피": "밥에 식초 섞기 → 생선 얹기", "칼로리": 300},
        {"음식": "딸기 파르페", "레시피": "컵에 과일과 요거트 겹겹이 쌓기 → 시럽 뿌리기", "칼로리": 400},
        {"음식": "샐러드", "레시피": "채소 손질 → 드레싱과 섞기", "칼로리": 180},
        {"음식": "치킨", "레시피": "닭 양념 → 튀기기", "칼로리": 900},
        {"음식": "팬케이크", "레시피": "반죽 만들기 → 팬에 굽기 → 시럽 올리기", "칼로리": 520},
        {"음식": "아이스크림", "레시피": "재료 섞기 → 냉동 → 저어주기 반복", "칼로리": 250}
    ],
    "중립": [
        {"음식": "치즈 피자", "레시피": "도우 준비 → 소스+치즈 올리기 → 굽기", "칼로리": 700},
        {"음식": "샌드위치", "레시피": "빵 사이에 재료 넣기", "칼로리": 350},
        {"음식": "볶음밥", "레시피": "재료 볶기 → 밥 넣고 함께 볶기", "칼로리": 600},
        {"음식": "계란말이", "레시피": "계란 풀기 → 팬에서 돌돌 말기", "칼로리": 200},
        {"음식": "우동", "레시피": "면 삶기 → 육수 준비 → 합치기", "칼로리": 450},
        {"음식": "김밥", "레시피": "김에 밥과 재료 올려 말기", "칼로리": 400},
        {"음식": "컵케이크", "레시피": "반죽 준비 → 컵에 넣고 굽기", "칼로리": 300}
    ],
    "부정": [
        {"음식": "초콜릿 케이크", "레시피": "반죽 만들기 → 굽기 → 시럽 뿌리기", "칼로리": 500},
        {"음식": "라멘", "레시피": "면 삶기 → 육수 만들기 → 토핑 올리기", "칼로리": 550},
        {"음식": "삼계탕", "레시피": "닭 손질 → 약재와 함께 끓이기", "칼로리": 800},
        {"음식": "죽", "레시피": "쌀 끓이기 → 원하는 재료 넣기", "칼로리": 300},
        {"음식": "떡볶이", "레시피": "떡 준비 → 양념과 볶기", "칼로리": 450},
        {"음식": "카레", "레시피": "재료 볶기 → 카레루 넣고 끓이기", "칼로리": 600},
        {"음식": "김치찌개", "레시피": "김치와 재료 넣고 끓이기", "칼로리": 350}
    ]
}

# ----------------------------
# 4. Streamlit 화면 구성
# ----------------------------
# 웹앱 기본 설정
st.set_page_config(page_title="음식 추천 + 레시피 + 칼로리", layout="centered")

# 제목과 설명
st.title("🍴 기분에 따른 음식 추천 웹앱")
st.write("👉 기분을 입력하면 감정 분석을 통해 음식과 레시피, 칼로리를 추천합니다!")

# 사용자 입력창
user_input = st.text_input("지금 기분을 자유롭게 입력해주세요 (예: '오늘 너무 피곤해요')")

# ----------------------------
# 5. 추천 결과 출력
# ----------------------------
if user_input:  
    mood = extended_sentiment_analysis(user_input)      # 감정 분석 실행
    food_info = random.choice(mood_foods[mood])         # 감정에 맞는 음식 중 하나 무작위 선택

    # 감정 분석 결과 출력
    st.success(f"🧠 감정 분석 결과: **{mood}**")

    # 음식 추천
    st.subheader(f"🎯 추천 음식: {food_info['음식']}")

    # 음식 레시피 출력
    st.write(f"📖 레시피: {food_info['레시피']}")

    # 음식 칼로리 출력
    st.write(f"🔥 예상 칼로리: **{food_info['칼로리']} kcal**")
