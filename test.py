# ----------------------------
# 1. 필요한 라이브러리 불러오기
# ----------------------------
import streamlit as st   # 웹앱 제작용 라이브러리
import random            # 리스트에서 무작위 선택용

# ----------------------------
# 2. 확장된 한국어 감정 분석 함수 정의
# ----------------------------
def extended_sentiment_analysis(text):
    """
    사용자의 문장을 분석하여 감정을 반환하는 함수
    - 긍정: 행복, 즐거움, 설렘, 만족, 신남
    - 부정: 슬픔, 우울, 외로움, 짜증, 피곤, 긴장
    - 중립: 보통, 평온, 무난
    """
    text = text.lower()  # 소문자로 변환하여 키워드 비교

    # 긍정 키워드 목록
    positive_keywords = ["좋아", "행복", "즐거", "신나", "기쁨", "만족", "설렘", "행복해", "신난", "좋은"]
    # 부정 키워드 목록
    negative_keywords = ["슬퍼", "우울", "짜증", "화나", "싫어", "힘들", "피곤", "외로움", "긴장", "불안"]
    # 중립 키워드 목록
    neutral_keywords = ["보통", "무난", "평온", "그냥"]

    # 키워드 매칭하여 감정 반환
    if any(word in text for word in positive_keywords):
        return "긍정"
    elif any(word in text for word in negative_keywords):
        return "부정"
    else:
        return "중립"

# ----------------------------
# 3. 감정별 음식 및 레시피 데이터
# ----------------------------
mood_foods = {
    "긍정": [
        {"음식": "파스타", "레시피": "1. 면 삶기 2. 소스 만들기 3. 면과 소스 섞기 4. 파마산 치즈 뿌리기"},
        {"음식": "초밥", "레시피": "1. 밥에 식초 섞기 2. 생선 준비 3. 밥과 생선 결합"},
        {"음식": "딸기 파르페", "레시피": "1. 컵에 과일과 요거트 겹겹이 쌓기 2. 시럽 뿌리기"},
        {"음식": "샐러드", "레시피": "1. 채소 씻기 2. 먹기 좋은 크기로 자르기 3. 드레싱과 섞기"},
        {"음식": "치킨", "레시피": "1. 닭 손질 2. 양념에 재우기 3. 튀기기"},
        {"음식": "팬케이크", "레시피": "1. 반죽 만들기 2. 팬에 부치기 3. 시럽 올리기"},
        {"음식": "아이스크림", "레시피": "1. 재료 섞기 2. 냉동실에 얼리기 3. 휘저으며 재냉동"},
        {"음식": "스무디", "레시피": "1. 과일 넣기 2. 우유나 요거트 넣기 3. 블렌더로 갈기"},
        {"음식": "와플", "레시피": "1. 반죽 만들기 2. 와플기계에 굽기 3. 시럽 올리기"},
        {"음식": "마카롱", "레시피": "1. 머랭 만들기 2. 아몬드 가루 섞기 3. 오븐에 굽기 4. 필링 넣기"}
    ],
    "중립": [
        {"음식": "치즈 피자", "레시피": "1. 도우 만들기 2. 소스 바르기 3. 치즈 올리기 4. 오븐에 굽기"},
        {"음식": "샌드위치", "레시피": "1. 빵 준비 2. 속재료 넣기 3. 접어서 먹기"},
        {"음식": "타코", "레시피": "1. 또띠아 준비 2. 고기나 야채 넣기 3. 소스 뿌리기"},
        {"음식": "볶음밥", "레시피": "1. 밥 준비 2. 재료 볶기 3. 밥 넣고 함께 볶기"},
        {"음식": "계란말이", "레시피": "1. 계란 풀기 2. 팬에 조금씩 부치며 말기"},
        {"음식": "우동", "레시피": "1. 면 삶기 2. 육수 준비 3. 면과 육수 합치기"},
        {"음식": "김밥", "레시피": "1. 밥과 재료 준비 2. 김에 밥과 재료 올리기 3. 말기"},
        {"음식": "샐러리 스틱", "레시피": "1. 샐러리 씻기 2. 먹기 좋은 크기로 자르기"},
        {"음식": "치즈 토스트", "레시피": "1. 빵에 치즈 올리기 2. 토스터에 굽기"},
        {"음식": "컵케이크", "레시피": "1. 반죽 만들기 2. 컵에 넣고 굽기 3. 데코레이션"}
    ],
    "부정": [
        {"음식": "초콜릿 케이크", "레시피": "1. 반죽 만들기 2. 오븐에 굽기 3. 초콜릿 시럽 뿌리기"},
        {"음식": "라멘", "레시피": "1. 면 삶기 2. 육수 만들기 3. 면과 육수 합치기 4. 토핑 올리기"},
        {"음식": "삼계탕", "레시피": "1. 닭 손질 2. 한약재 넣고 끓이기"},
        {"음식": "죽", "레시피": "1. 쌀 씻기 2. 물과 함께 끓이기 3. 원하는 재료 넣기"},
        {"음식": "떡볶이", "레시피": "1. 떡 준비 2. 양념 섞어 볶기"},
        {"음식": "카레", "레시피": "1. 재료 볶기 2. 카레루 넣고 끓이기"},
        {"음식": "스프", "레시피": "1. 재료 볶기 2. 육수 넣고 끓이기"},
        {"음식": "김치찌개", "레시피": "1. 김치와 재료 넣고 끓이기"},
        {"음식": "라자냐", "레시피": "1. 면 삶기 2. 소스 준비 3. 층층이 쌓기 4. 오븐에 굽기"},
        {"음식": "비빔밥", "레시피": "1. 밥 준비 2. 나물 준비 3. 밥과 나물 비비기 4. 고추장 넣기"}
    ]
}

# ----------------------------
# 4. Streamlit 화면 구성
# ----------------------------
# 페이지 설정 (아이콘 없이)
st.set_page_config(page_title="음식 추천 + 레시피 웹앱", layout="centered")  
# - page_title: 브라우저 탭 제목  
# - layout="centered": 화면 중앙 배치  

# 앱 제목과 설명
st.title("🍽️ 기분 → 감정 분석 → 랜덤 음식 + 레시피 추천")
st.write("👉 기분에 맞는 음식을 추천하고, 레시피도 함께 제공합니다!")

# 사용자로부터 기분 입력 받기
user_input = st.text_input("지금 기분을 자유롭게 입력해주세요 (예: '오늘 너무 우울해요')")

# 사용자가 입력하면 실행
if user_input:
    # 1) 감정 분석
    mood = extended_sentiment_analysis(user_input)       
    # 2) 해당 감정 음식 중 랜덤 선택
    food_info = random.choice(mood_foods[mood])              

    # 분석 결과 출력
    st.success(f"**분석 결과:** {mood}")                # 감정 결과 표시

    # 추천 음식 이름 출력
    st.write(f"🎯 추천 음식: **{food_info['음식']}**")  

    # 추천 음식 레시피 출력
    st.write(f"📖 레시피: {food_info['레시피']}")  
